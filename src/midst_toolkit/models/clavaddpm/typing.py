from collections.abc import Callable
from dataclasses import dataclass
from enum import Enum
from typing import Any

import numpy as np
from torch import nn


# TODO: Temporary, will switch to classes later
Configs = dict[str, Any]
Tables = dict[str, dict[str, Any]]
RelationOrder = list[tuple[str, str]]
GroupLengthsProbDicts = dict[tuple[str, str], dict[int, dict[int, float]]]
ArrayDict = dict[str, np.ndarray]
ModuleType = str | Callable[..., nn.Module]


class ClusteringMethod(Enum):
    """Possioble clustering methods for multi-table training."""

    KMEANS = "kmeans"
    GMM = "gmm"
    KMEANS_AND_GMM = "kmeans_and_gmm"
    VARIATIONAL = "variational"


class IsYCond(Enum):
    """
    The condition on the y column.

    IsYCond.CONCAT: y is concatenated to X, the model learn a joint distribution of (y, X)
    IsYCond.EMBEDDING: y is not concatenated to X. During computations, y is embedded
        and added to the latent vector of X
    IsYCond.NONE: y column is completely ignored

    How does is_y_cond affect the generation of y?
    is_y_cond:
        IsYCond.CONCAT: the model synthesizes (y, X) directly, so y is just the first column
        IsYCond.EMBEDDING: y is first sampled using empirical distribution of y. The model only
            synthesizes X. When returning the generated data, we return the generated X
            and the sampled y. (y is sampled from empirical distribution, instead of being
            generated by the model)
            Note that in this way, y is still not independent of X, because the model has been
            adding the embedding of y to the latent vector of X during computations.
        IsYCond.NONE:
            y is synthesized using y's empirical distribution. X is generated by the model.
            In this case, y is completely independent of X.
    """

    CONCAT = "concat"
    EMBEDDING = "embedding"
    NONE = "none"


@dataclass
class RTDLParameters:
    """Parameters for the RTDL model."""

    d_layers: list[int]
    dropout: float
    d_in: int = 0
    d_out: int = 0
    emb_d: int = 0
    n_blocks: int = 0
    d_main: int = 0
    d_hidden: int = 0
    dropout_first: float = 0
    dropout_second: float = 0


@dataclass
class ModelParameters:
    """Parameters for the ClavaDDPM model."""

    rtdl_parameters: RTDLParameters
    d_in: int = 0
    num_classes: int = 0
    is_y_cond: IsYCond = IsYCond.NONE


class GaussianLossType(Enum):
    """Possible types of Gaussian loss."""

    MSE = "mse"
    KL = "kl"


class Scheduler(Enum):
    """Possible types of scheduler."""

    COSINE = "cosine"
    LINEAR = "linear"
