{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MIDST Toolkit Repository","text":""},{"location":"#midst-toolkit","title":"MIDST Toolkit","text":"<p>A toolkit for facilitating MIA resiliency testing on diffusion-model-based synthetic tabular data. Many of the attacks included in this toolkit are based on the most success ones used in the 2025 SaTML MIDST Competition.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#top-level-module","title":"Top Level Module","text":""},{"location":"api/#midst_toolkit","title":"midst_toolkit","text":""},{"location":"api/#midst_toolkit.hello","title":"hello","text":"<pre><code>hello()\n</code></pre> <p>Hello function.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hello world</p> Source code in <code>src/midst_toolkit/__init__.py</code> <pre><code>def hello() -&gt; str:\n    \"\"\"Hello function.\n\n    Returns:\n        str: Hello world\n    \"\"\"\n    return \"Hello from midst-toolkit!\"\n</code></pre>"},{"location":"api/#midst_toolkit.bar","title":"bar","text":""},{"location":"api/#midst_toolkit.bar.bar","title":"bar","text":"<pre><code>bar(foo)\n</code></pre> <p>Bar function.</p> <p>Parameters:</p> Name Type Description Default <code>foo</code> <code>str</code> <p>Foo string</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A modified stringe</p> Source code in <code>src/midst_toolkit/bar.py</code> <pre><code>def bar(foo: str) -&gt; str:\n    \"\"\"Bar function.\n\n    Args:\n        foo (str): Foo string\n\n    Returns:\n        str: A modified stringe\n    \"\"\"\n    return f\"bar{foo}\"\n</code></pre>"},{"location":"api/#midst_toolkit.foo","title":"foo","text":""},{"location":"api/#midst_toolkit.foo.foo","title":"foo","text":"<pre><code>foo(bar)\n</code></pre> <p>Foo function.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Bar string</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String</p> Source code in <code>src/midst_toolkit/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Foo function.\n\n    Args:\n        bar (str): Bar string\n\n    Returns:\n        str: String\n    \"\"\"\n    return f\"foo{bar}\"\n</code></pre>"},{"location":"api/#foo-module","title":"Foo Module","text":""},{"location":"api/#midst_toolkit.foo","title":"midst_toolkit.foo","text":""},{"location":"api/#midst_toolkit.foo.foo","title":"foo","text":"<pre><code>foo(bar)\n</code></pre> <p>Foo function.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Bar string</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String</p> Source code in <code>src/midst_toolkit/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Foo function.\n\n    Args:\n        bar (str): Bar string\n\n    Returns:\n        str: String\n    \"\"\"\n    return f\"foo{bar}\"\n</code></pre>"},{"location":"api/#bar-module","title":"Bar Module","text":""},{"location":"api/#midst_toolkit.bar","title":"midst_toolkit.bar","text":""},{"location":"api/#midst_toolkit.bar.bar","title":"bar","text":"<pre><code>bar(foo)\n</code></pre> <p>Bar function.</p> <p>Parameters:</p> Name Type Description Default <code>foo</code> <code>str</code> <p>Foo string</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A modified stringe</p> Source code in <code>src/midst_toolkit/bar.py</code> <pre><code>def bar(foo: str) -&gt; str:\n    \"\"\"Bar function.\n\n    Args:\n        foo (str): Foo string\n\n    Returns:\n        str: A modified stringe\n    \"\"\"\n    return f\"bar{foo}\"\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#pyprojecttoml-file-and-dependency-management","title":"pyproject.toml file and dependency management","text":"<p>If your project doesn't have a pyproject.toml file, simply copy the one from the template and update file according to your project.</p> <p>For managing dependencies, this template makes use of uv, which according to some benchmarks is faster than alternative like Poetry (which our original AI Engineering Template makes use of).</p> <p>Hence, be sure to install uv in order to to setup the development virtual environment. Instructions for installing uv can be found here. Note that uv supports optional dependency groups which helps to manage dependencies for different parts of development such as <code>documentation</code>, <code>testing</code>, etc. The core dependencies are installed using the command:</p> <pre><code>uv sync\n</code></pre> <p>Additional dependency groups can be installed using the <code>--group</code> flag followed by the group name. For example:</p> <pre><code>uv sync --all-extras --group docs --group test\n</code></pre> <p>mypy configuration options</p> <p>By default, the <code>mypy</code> configuration in the <code>pyproject.toml</code> disallows subclassing the <code>Any</code> type - <code>allow_subclassing_any = false</code>. In cases where the type checker is not able to determine the types of objects in some external library (e.g. <code>PyTorch</code>), it will treat them as <code>Any</code> and raise errors. If your codebase has many of such cases, you can set <code>allow_subclassing_any = true</code> in the <code>mypy</code> configuration or remove it entirely to use the default value (which is <code>true</code>). For example, in a <code>PyTorch</code> project, subclassing <code>nn.Module</code> will raise errors if <code>allow_subclassing_any</code> is set to <code>false</code>.</p>"},{"location":"user_guide/#pre-commit","title":"pre-commit","text":"<p>You can use pre-commit to run pre-commit hooks (code checks, liniting, etc.) when you run <code>git commit</code> and commit your code. Simply copy the <code>.pre-commit-config.yaml</code> file to the root of the repository and install the test dependencies which installs pre-commit. Then run:</p> <pre><code>pre-commit install\n</code></pre> <p>If you prefer to not enforce using pre-commit every time you run <code>git commit</code>, you will have to run <code>pre-commit run --all-files</code> from the command line before you commit your code.</p> <p>hook configuration</p> <p>Some of the pre-commit hooks use supported hooks from the web.</p> <p>For some others, they are locally installed and hence use the python virtual environment locally. If <code>language</code> is set to <code>python</code>, each time the hook is installed, a separate python virtual environment is created and you can specify dependencies needed using <code>additional_dependencies</code>.</p> <p>If <code>language</code> is set to <code>system</code>, the activated python virtual environment is used and and hence you have to ensure that the required dependencies and their versions are correctly installed.</p> <pre><code>  - repo: local\n    hooks:\n    - id: pytest\n      name: pytest\n      entry: python3 -m pytest -m \"not integration_test\"\n      language: python/system # set according to your project needs\n</code></pre> <p>typos</p> <p>The typos pre-commit hook is used to check for common spelling mistakes in the codebase. While useful, it may require some configuration to ignore certain words or phrases that are not typos. You can configure the typos hook in the <code>pyproject.toml</code> file. In a large codebase, it may be useful to disable the typos hook and only run it occasionally on the entire codebase.</p>"},{"location":"user_guide/#pre-commit-ci","title":"pre-commit ci","text":"<p>Instead of fixing pre-commit errors manually, a CI to fix them as well as update pre-commit hooks periodically can be enabled for your repository. Please check pre-commit.ci and add your repository. The configuration for <code>pre-commit.ci</code> can be added to the <code>.pre-commit-config.yaml</code> file.</p>"},{"location":"user_guide/#documentation","title":"documentation","text":"<p>If your project doesn't have documentation, copy the directory named <code>docs</code> to the root directory of your repository. This template uses MkDocs with the Material for MkDocs theme.</p> <p>In order to build the documentation, install the documentation dependencies as mentioned in the previous section, then run the command:</p> <pre><code>mkdocs build\n</code></pre> <p>If you're making changes to the docs, and want to serve them locally on your machine, then you can use this command instead:</p> <pre><code>mkdocs serve\n</code></pre> <p>The above will launch the docs locally on <code>http://127.0.0.1:8000</code>, which you can enter into your browser of choice. Conveniently, this process also watches for any changes you make to the docs and will update them as they occur.</p> <p>You can configure the documentation by updating the <code>mkdocs.yml</code> file at the root of your repository. The markdown files in the <code>docs</code> directory can be updated to reflect the project's documentation.</p>"},{"location":"user_guide/#github-actions","title":"github actions","text":"<p>The template consists of some github action continuous integration workflows that you can add to your repository.</p> <p>The available workflows are:</p> <ul> <li>code checks: Static code analysis, code formatting and unit tests</li> <li>documentation: Project documentation including example API reference</li> <li>integration tests: Integration tests</li> <li>publish: Publishing python package to PyPI. Create a <code>PYPI_API_TOKEN</code> and add it to the repository's actions secret variables in order to publish PyPI packages when new software releases are created on Github.</li> </ul>"}]}